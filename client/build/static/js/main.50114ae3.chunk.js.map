{"version":3,"sources":["user_location.svg","message_location.svg","MessageCardForm.js","API.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","MessageCardForm","props","Card","body","className","CardTitle","CardText","sendingMessage","sentMessage","haveUsersLocation","autoPlay","loop","src","Form","onSubmit","formSubmitted","FormGroup","Label","for","Input","onChange","valueChanged","type","name","id","placeholder","Button","color","onClick","cancelMessage","disabled","formIsValid","API_URL","window","location","hostname","getLocation","Promise","resolve","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lng","longitude","fetch","then","res","json","sendMessage","message","method","headers","JSON","stringify","myIcon","L","icon","iconUrl","userLocationURL","iconSize","messageIcon","messageLocationURL","App","state","zoom","userMessage","showMessageForm","messages","setState","trim","length","event","preventDefault","result","setTimeout","target","value","prevState","haveSeenLocation","reduce","all","key","toFixed","otherMessages","push","this","Map","worldCopyJump","center","TileLayer","attribution","url","Marker","map","_id","Popup","role","aria-label","href","rel","Component","isLocalhost","Boolean","match","registerValidSW","swUrl","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","response","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.50114ae3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/user_location.ff1c0bff.svg\";","module.exports = __webpack_public_path__ + \"static/media/message_location.3fd7abd3.svg\";","import React from \"react\";\r\nimport {\r\n  Card,\r\n  Button,\r\n  CardTitle,\r\n  CardText,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n} from \"reactstrap\";\r\n\r\nconst MessageCardForm = (props) => {\r\n  return (\r\n    <Card body className=\"message-form\">\r\n      <CardTitle>Welcome to GuestM.app!</CardTitle>\r\n      <CardText>Leave a message with your location!</CardText>\r\n      {!props.sendingMessage &&\r\n      !props.sentMessage &&\r\n      props.haveUsersLocation ? (\r\n        <Form onSubmit={props.formSubmitted}>\r\n          <FormGroup>\r\n            <Label for=\"name\">Name</Label>\r\n            <Input\r\n              onChange={props.valueChanged}\r\n              type=\"text\"\r\n              name=\"name\"\r\n              id=\"name\"\r\n              placeholder=\"Enter your name\"\r\n            />\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <Label for=\"message\">Message</Label>\r\n            <Input\r\n              onChange={props.valueChanged}\r\n              type=\"textarea\"\r\n              name=\"message\"\r\n              id=\"message\"\r\n              placeholder=\"Enter a message\"\r\n            />\r\n          </FormGroup>\r\n          <Button type=\"cancel\" color=\"danger\" onClick={props.cancelMessage}>\r\n            Cancel\r\n          </Button>{\" \"}\r\n          <Button type=\"submit\" color=\"info\" disabled={!props.formIsValid()}>\r\n            Send\r\n          </Button>\r\n        </Form>\r\n      ) : props.sendingMessage || !props.haveUsersLocation ? (\r\n        <video\r\n          autoPlay\r\n          loop\r\n          src=\"https://i.giphy.com/media/3oEjHTSuJrMnj08DpS/giphy.mp4\"\r\n        ></video>\r\n      ) : (\r\n        <CardText>Thanks for submitting a message!</CardText>\r\n      )}\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default MessageCardForm;\r\n","const API_URL =\r\n  window.location.hostname === \"localhost\"\r\n    ? \"http://localhost:5000/api/v1/messages\"\r\n    : \"deploy\";\r\n\r\nexport function getMessages() {\r\n  return fetch(API_URL)\r\n    .then((res) => res.json())\r\n    .then((messages) => {\r\n      const haveSeenLocation = {};\r\n      return messages.reduce((all, message) => {\r\n        const key = `${message.latitude.toFixed(3)}${message.longitude.toFixed(\r\n          3\r\n        )}`;\r\n        if (haveSeenLocation[key]) {\r\n          haveSeenLocation[key].otherMessages =\r\n            haveSeenLocation[key].otherMessages || [];\r\n          haveSeenLocation[key].otherMessages.push(message);\r\n        } else {\r\n          haveSeenLocation[key] = message;\r\n          all.push(message);\r\n        }\r\n        return all;\r\n      }, []);\r\n    });\r\n}\r\n\r\nexport function getLocation() {\r\n  return new Promise((resolve) => {\r\n    navigator.geolocation.getCurrentPosition(\r\n      (position) => {\r\n        resolve({\r\n          lat: position.coords.latitude,\r\n          lng: position.coords.longitude,\r\n        });\r\n      },\r\n      () => {\r\n        resolve(\r\n          fetch(\"https://ipapi.co/json\")\r\n            .then((res) => res.json())\r\n            .then((location) => {\r\n              return {\r\n                lat: location.latitude,\r\n                lng: location.longitude,\r\n              };\r\n            })\r\n        );\r\n      }\r\n    );\r\n  });\r\n}\r\n\r\nexport function sendMessage(message) {\r\n  return fetch(API_URL, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"content-type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(message),\r\n  }).then((res) => res.json());\r\n}\r\n","import React, { Component } from \"react\";\nimport L from \"leaflet\";\nimport { Map, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport { Card, CardText, Button } from \"reactstrap\";\n\nimport userLocationURL from \"./user_location.svg\";\nimport messageLocationURL from \"./message_location.svg\";\n\nimport MessageCardForm from \"./MessageCardForm\";\nimport { getMessages, getLocation, sendMessage } from \"./API\";\n\nimport \"./App.css\";\n\nconst myIcon = L.icon({\n  iconUrl: userLocationURL,\n  iconSize: [50, 82],\n});\n\nconst messageIcon = L.icon({\n  iconUrl: messageLocationURL,\n  iconSize: [50, 82],\n});\n\nclass App extends Component {\n  state = {\n    location: {\n      lat: 51.505,\n      lng: -0.09,\n    },\n    haveUsersLocation: false,\n    zoom: 2,\n    userMessage: {\n      name: \"\",\n      message: \"\",\n    },\n    showMessageForm: false,\n    sendingMessage: false,\n    sentMessage: false,\n    messages: [],\n  };\n\n  componentDidMount() {\n    getMessages().then((messages) => {\n      this.setState({\n        messages,\n      });\n    });\n  }\n\n  showMessageForm = () => {\n    this.setState({\n      showMessageForm: true,\n    });\n    getLocation().then((location) => {\n      this.setState({\n        location,\n        haveUsersLocation: true,\n        zoom: 13,\n      });\n    });\n  };\n\n  cancelMessage = () => {\n    this.setState({\n      showMessageForm: false,\n    });\n  };\n\n  formIsValid = () => {\n    let { name, message } = this.state.userMessage;\n    name = name.trim();\n    message = message.trim();\n\n    const validMessage =\n      name.length > 0 &&\n      name.length <= 500 &&\n      message.length > 0 &&\n      message.length <= 500;\n\n    return validMessage && this.state.haveUsersLocation ? true : false;\n  };\n\n  formSubmitted = (event) => {\n    event.preventDefault();\n\n    if (this.formIsValid()) {\n      this.setState({\n        sendingMessage: true,\n      });\n\n      const message = {\n        name: this.state.userMessage.name,\n        message: this.state.userMessage.message,\n        latitude: this.state.location.lat,\n        longitude: this.state.location.lng,\n      };\n\n      sendMessage(message).then((result) => {\n        setTimeout(() => {\n          this.setState({\n            sendingMessage: false,\n            sentMessage: true,\n          });\n        }, 4000);\n      });\n    }\n  };\n\n  valueChanged = (event) => {\n    const { name, value } = event.target;\n    this.setState((prevState) => ({\n      userMessage: {\n        ...prevState.userMessage,\n        [name]: value,\n      },\n    }));\n  };\n\n  render() {\n    const position = [this.state.location.lat, this.state.location.lng];\n    return (\n      <div className=\"map\">\n        <Map\n          className=\"map\"\n          worldCopyJump={true}\n          center={position}\n          zoom={this.state.zoom}\n        >\n          <TileLayer\n            attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors and Chat location by Iconika from the Noun Project'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          />\n          {this.state.haveUsersLocation ? (\n            <Marker position={position} icon={myIcon}></Marker>\n          ) : (\n            \"\"\n          )}\n          {this.state.messages.map((message) => (\n            <Marker\n              key={message._id}\n              position={[message.latitude, message.longitude]}\n              icon={messageIcon}\n            >\n              <Popup>\n                <p>\n                  <em>{message.name}:</em> {message.message}\n                </p>\n                {message.otherMessages\n                  ? message.otherMessages.map((message) => (\n                      <p key={message._id}>\n                        <em>{message.name}:</em> {message.message}\n                      </p>\n                    ))\n                  : \"\"}\n              </Popup>\n            </Marker>\n          ))}\n        </Map>\n        {!this.state.showMessageForm ? (\n          <Button\n            className=\"message-form\"\n            onClick={this.showMessageForm}\n            color=\"info\"\n          >\n            Add a Message\n          </Button>\n        ) : !this.state.sentMessage ? (\n          <MessageCardForm\n            cancelMessage={this.cancelMessage}\n            showMessageForm={this.state.showMessageForm}\n            sendingMessage={this.state.sendingMessage}\n            sentMessage={this.state.sentMessage}\n            haveUsersLocation={this.state.haveUsersLocation}\n            formSubmitted={this.formSubmitted}\n            valueChanged={this.valueChanged}\n            formIsValid={this.formIsValid}\n          />\n        ) : (\n          <Card body className=\"thanks-form\">\n            <CardText>Thanks for submitting a message!</CardText>\n          </Card>\n        )}\n        <Card className=\"footer\">\n          <CardText>\n            {\" \"}\n            Facut cu durere si{\" \"}\n            <span role=\"img\" aria-label=\"love\">\n              💚\n            </span>{\" \"}\n            de{\" \"}\n            <a\n              href=\"https://github.com/cosics\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              cezi\n            </a>\n          </CardText>\n        </Card>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n/*import React, { Component } from \"react\";\nimport Joi from \"joi\";\nimport L from \"leaflet\";\nimport { Map, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport {\n  Card,\n  Button,\n  CardTitle,\n  CardText,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n} from \"reactstrap\";\nimport userLocationURL from \"./user_location.svg\";\nimport messageLocationURL from \"./message_location.svg\";\n\nimport \"./App.css\";\n\nconst myIcon = L.icon({\n  iconUrl: userLocationURL,\n  iconSize: [50, 82],\n  iconAnchor: [0, 82],\n  popupAnchor: [25, -20],\n});\n\nconst messageIcon = L.icon({\n  iconUrl: messageLocationURL,\n  iconSize: [50, 82],\n  iconAnchor: [0, 82],\n  popupAnchor: [25, -20],\n});\n\nconst schema = Joi.object().keys({\n  name: Joi.string().min(1).max(100).required(),\n  message: Joi.string().min(1).max(500).required(),\n});\n\nconst API_URL =\n  window.location.hostname === \"localhost\"\n    ? \"http://localhost:5000/api/v1/messages\"\n    : \"production-url-here\";\n\nclass App extends Component {\n  state = {\n    location: {\n      lat: 51.505,\n      lng: -0.09,\n    },\n    haveUsersLocation: false,\n    zoom: 2,\n    userMessage: {\n      name: \"\",\n      message: \"\",\n    },\n    sendingMessage: false,\n    sentMessage: false,\n    messages: [],\n  };\n\n  componentDidMount() {\n    fetch(API_URL)\n      .then((res) => res.json())\n      .then((messages) => {\n        const haveSeenLocation = {};\n        messages = messages.reduce((all, message) => {\n          const key = `${message.latitude}${message.longitude}`;\n          if (haveSeenLocation[key]) {\n            haveSeenLocation[key].otherMessages =\n              haveSeenLocation[key].otherMessages || [];\n            haveSeenLocation[key].otherMessages.push(message);\n          } else {\n            haveSeenLocation[key] = message;\n            all.push(message);\n          }\n          return all;\n        }, []);\n        this.setState({\n          messages,\n        });\n      });\n\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        //do_something(position.coords.latitude, position.coords.longitude);\n\n        this.setState({\n          location: {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude,\n          },\n          haveUsersLocation: true,\n          zoom: 13,\n        });\n      },\n      () => {\n        console.log(\"oh no nu ne-a dat locatia :(\");\n        fetch(\"https://ipapi.co/json\")\n          .then((res) => res.json())\n          .then((location) => {\n            console.log(location);\n            this.setState({\n              location: {\n                lat: location.latitude,\n                lng: location.longitude,\n              },\n              haveUsersLocation: true,\n              zoom: 13,\n            });\n          });\n      }\n    );\n  }\n\n  formIsValid = () => {\n    const userMessage = {\n      name: this.state.userMessage.name,\n      message: this.state.userMessage.message,\n    };\n    const result = Joi.validate(userMessage, schema);\n\n    return !result.error && this.state.haveUsersLocation ? true : false;\n  };\n\n  formSubmitted = (event) => {\n    event.preventDefault(); //page doesnt refresh\n    if (this.formIsValid()) {\n      this.setState({\n        sendingMessage: true,\n      });\n      fetch(API_URL, {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          \"content-type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          name: this.state.userMessage.name,\n          message: this.state.userMessage.message,\n          latitude: this.state.location.lat,\n          longitude: this.state.location.lng,\n        }),\n      })\n        .then((res) => res.json())\n        .then((message) => {\n          console.log(message);\n          setTimeout(() => {\n            this.setState({\n              sendingMessage: false,\n              sentMessage: true,\n            });\n          }, 4000);\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    }\n  };\n\n  valueChanged = (event) => {\n    const { name, value } = event.target;\n    this.setState((prevState) => ({\n      userMessage: {\n        ...prevState.userMessage,\n        [name]: value,\n      },\n    }));\n  };\n\n  render() {\n    const position = [this.state.location.lat, this.state.location.lng];\n    return (\n      <div>\n        <Map className=\"map\" center={position} zoom={this.state.zoom}>\n          <TileLayer\n            attribution='&amp;copy <a href=\"\"http://osm.org/copyright\"\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          />\n\n          {this.state.haveUsersLocation ? (\n            <Marker position={position} icon={myIcon}></Marker>\n          ) : (\n            \"\"\n          )}\n          {this.state.messages.map((message) => (\n            <Marker\n              key={message._id}\n              position={[message.latitude, message.longitude]}\n              icon={messageIcon}\n            >\n              <Popup>\n                <p>\n                  <em>{message.name}:</em>\n                  {message.message}\n                </p>\n                {message.otherMessages\n                  ? message.otherMessages.map((message) => (\n                      <p key={message._id}>\n                        <em>{message.name}:</em>\n                        {message.message}\n                      </p>\n                    ))\n                  : \"\"}\n              </Popup>\n            </Marker>\n          ))}\n        </Map>\n        <Card body className=\"message-form\">\n          <CardTitle>Welcome to whatever this is!</CardTitle>\n          <CardText>Lasă un mesaj</CardText>\n          {!this.state.sendingMessage &&\n          !this.state.sentMessage &&\n          this.state.haveUsersLocation ? (\n            <Form onSubmit={this.formSubmitted}>\n              <FormGroup>\n                <Label for=\"name\">Nume:</Label>\n                <Input\n                  onChange={this.valueChanged}\n                  type=\"text\"\n                  name=\"name\"\n                  id=\"name\"\n                  placeholder=\"Cine\"\n                ></Input>\n              </FormGroup>\n              <FormGroup>\n                <Label for=\"message\">Mesaj:</Label>\n                <Input\n                  onChange={this.valueChanged}\n                  type=\"textarea\"\n                  name=\"message\"\n                  id=\"message\"\n                  placeholder=\"Hai spune ceva\"\n                ></Input>\n              </FormGroup>\n              <Button type=\"submit\" color=\"info\" disabled={!this.formIsValid()}>\n                Trimite\n              </Button>\n            </Form>\n          ) : this.state.sendingMessage || !this.state.haveUsersLocation ? (\n            <video\n              autoPlay\n              loop\n              className=\"videoInsert\"\n              src=\"https://i.giphy.com/media/3oEjHTSuJrMnj08DpS/giphy.mp4\"\n            ></video>\n          ) : (\n            <CardText>Thanks for your contribution!</CardText>\n          )}\n        </Card>\n      </div>\n    );\n  }\n}\n\nexport default App; */\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://goo.gl/SC7cgQ\"\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"leaflet/dist/leaflet.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}